import MapUI from './ui/map';
import AutocompleteUI from './ui/autocomplete';
import type { Location, RadarAutocompleteParams, RadarConversionParams, RadarDistanceParams, RadarForwardGeocodeParams, RadarMatrixParams, RadarMetadata, RadarOptions, RadarReverseGeocodeParams, RadarSearchGeofencesParams, RadarSearchPlacesParams, RadarTrackParams, RadarTripOptions, RadarValidateAddressParams } from './types';
import 'maplibre-gl/dist/maplibre-gl.css';
import '../styles/radar.css';
declare class Radar {
    static get VERSION(): string;
    static get ui(): {
        maplibregl: typeof import("maplibre-gl");
        map: typeof MapUI.createMap;
        marker: typeof MapUI.createMarker;
        autocomplete: typeof AutocompleteUI.createAutocomplete;
    };
    static initialize(publishableKey: string, options?: RadarOptions): void;
    static clear(): void;
    static setUserId(userId?: string): void;
    static setDescription(description?: string): void;
    static setMetadata(metadata?: RadarMetadata): void;
    static getLocation(): Promise<import("./types").NavigatorPosition>;
    static trackOnce(params?: RadarTrackParams): Promise<import("./types").RadarTrackResponse>;
    static trackVerified(params?: RadarTrackParams): Promise<import("./types").RadarTrackVerifiedResponse>;
    static getContext(params: Location): Promise<import("./types").RadarContextResponse>;
    static setTripOptions(tripOptions?: RadarTripOptions): void;
    static clearTripOptions(): void;
    static getTripOptions(): RadarTripOptions;
    static startTrip(tripOptions: RadarTripOptions): Promise<import("./types").RadarTripResponse>;
    static updateTrip(tripOptions: RadarTripOptions): Promise<import("./types").RadarTripResponse>;
    static completeTrip(): Promise<import("./types").RadarTripResponse>;
    static cancelTrip(): Promise<import("./types").RadarTripResponse>;
    static logConversion(params: RadarConversionParams): Promise<import("./types").RadarConversionResponse>;
    static forwardGeocode(params: RadarForwardGeocodeParams): Promise<import("./types").RadarGeocodeResponse>;
    static reverseGeocode(params: RadarReverseGeocodeParams): Promise<import("./types").RadarGeocodeResponse>;
    static ipGeocode(): Promise<import("./types").RadarIPGeocodeResponse>;
    static autocomplete(params: RadarAutocompleteParams): Promise<import("./types").RadarAutocompleteResponse>;
    static searchGeofences(params: RadarSearchGeofencesParams): Promise<import("./types").RadarSearchGeofencesResponse>;
    static searchPlaces(params: RadarSearchPlacesParams): Promise<import("./types").RadarSearchPlacesResponse>;
    static validateAddress(params: RadarValidateAddressParams): Promise<import("./types").RadarValidateAddressResponse>;
    static distance(params: RadarDistanceParams): Promise<import("./types").RadarRouteResponse>;
    static matrix(params: RadarMatrixParams): Promise<import("./types").RadarMatrixResponse>;
}
export default Radar;
